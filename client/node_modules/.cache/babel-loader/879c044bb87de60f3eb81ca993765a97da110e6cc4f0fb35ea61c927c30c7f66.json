{"ast":null,"code":"import\"./App.css\";import React,{useState,useRef}from\"react\";import Board from\"./ui/Board\";import Interface from\"./ui/Interface\";import{REST}from\"./services/api.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function getGrid(){const grid=[];for(let i=0;i<9;i++){grid[i]=Array(9).fill(0);}return grid;}function copy2DArray(from,to){for(let i=0;i<from.length;i++){to[i]=[...from[i]];}}function Sudoku(){const[grid,setGrid]=useState(getGrid);const[puzzleStatus,setPuzzleStatus]=useState(\"** UNSOLVED **\");const initialGrid=useRef(getGrid());function handleChange(row,col,e){const re=/^[0-9\\b]+$/;if(e.target.value===\"\"||re.test(e.target.value)){if(Number(e.target.value)<10&&initialGrid.current[row][col]===0){const newGrid=[...grid];newGrid[row][col]=Number(e.target.value);setGrid(newGrid);}}}async function handleInterface(action){let newGrid;switch(action){case\"create\":newGrid=await handleCreate();copy2DArray(newGrid,initialGrid.current);setPuzzleStatus(\"\");setGrid(newGrid);break;case\"solve\":newGrid=await handleSolve();setGrid(newGrid);break;case\"clear\":newGrid=getGrid();copy2DArray(newGrid,initialGrid.current);setGrid(newGrid);setPuzzleStatus(\"\");break;case\"validate\":const status=await handleValidate();const puzzStats=status?\"** SOLVED **\":\"** UNSOLVED **\";setPuzzleStatus(puzzStats);break;default:throw new Error(\"Invalid action\");}}async function handleCreate(){try{const response=await REST.getBoard();const data=await response.json();return data.game;}catch(error){console.log(error);}}async function handleValidate(){try{const response=await REST.validateBoard(grid);const data=await response.json();return data.status;}catch(error){console.log(error);}}async function handleSolve(){try{const response=await REST.solveBoard(grid);const data=await response.json();if(data.status){setPuzzleStatus(\"** SOLVED **\");return data.solution;}else{setPuzzleStatus(\"** UNSOLVABLE **\");return grid;}}catch(error){console.log(error);}}return/*#__PURE__*/_jsxs(\"div\",{className:\"Sudoku\",children:[/*#__PURE__*/_jsx(Board,{puzzle:initialGrid.current,grid:grid,handleChange:handleChange}),/*#__PURE__*/_jsx(Interface,{handleInterface:handleInterface,status:puzzleStatus})]});}export default Sudoku;","map":{"version":3,"names":["React","useState","useRef","Board","Interface","REST","jsx","_jsx","jsxs","_jsxs","getGrid","grid","i","Array","fill","copy2DArray","from","to","length","Sudoku","setGrid","puzzleStatus","setPuzzleStatus","initialGrid","handleChange","row","col","e","re","target","value","test","Number","current","newGrid","handleInterface","action","handleCreate","handleSolve","status","handleValidate","puzzStats","Error","response","getBoard","data","json","game","error","console","log","validateBoard","solveBoard","solution","className","children","puzzle"],"sources":["C:/Users/verma/Downloads/Sdoku_solver/Sudoku_Solver/sudoku-game/client/src/Sudoku.js"],"sourcesContent":["import \"./App.css\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport Board from \"./ui/Board\";\r\nimport Interface from \"./ui/Interface\";\r\nimport { REST } from \"./services/api.js\";\r\n\r\nfunction getGrid() {\r\n  const grid = [];\r\n  for (let i = 0; i < 9; i++) {\r\n    grid[i] = Array(9).fill(0);\r\n  }\r\n  return grid;\r\n}\r\n\r\nfunction copy2DArray(from, to) {\r\n  for (let i = 0; i < from.length; i++) {\r\n    to[i] = [...from[i]];\r\n  }\r\n}\r\n\r\nfunction Sudoku() {\r\n  const [grid, setGrid] = useState(getGrid);\r\n  const [puzzleStatus, setPuzzleStatus] = useState(\"** UNSOLVED **\");\r\n  const initialGrid = useRef(getGrid());\r\n\r\n  function handleChange(row, col, e) {\r\n    const re = /^[0-9\\b]+$/;\r\n    if (e.target.value === \"\" || re.test(e.target.value)) {\r\n      if (Number(e.target.value) < 10 && initialGrid.current[row][col] === 0) {\r\n        const newGrid = [...grid];\r\n        newGrid[row][col] = Number(e.target.value);\r\n        setGrid(newGrid);\r\n      }\r\n    }\r\n  }\r\n\r\n  async function handleInterface(action) {\r\n    let newGrid;\r\n    switch (action) {\r\n      case \"create\":\r\n        newGrid = await handleCreate();\r\n        copy2DArray(newGrid, initialGrid.current);\r\n        setPuzzleStatus(\"\");\r\n        setGrid(newGrid);\r\n        break;\r\n      case \"solve\":\r\n        newGrid = await handleSolve();\r\n        setGrid(newGrid);\r\n        break;\r\n      case \"clear\":\r\n        newGrid = getGrid();\r\n        copy2DArray(newGrid, initialGrid.current);\r\n        setGrid(newGrid);\r\n        setPuzzleStatus(\"\");\r\n        break;\r\n      case \"validate\":\r\n        const status = await handleValidate();\r\n        const puzzStats = status ? \"** SOLVED **\" : \"** UNSOLVED **\";\r\n        setPuzzleStatus(puzzStats);\r\n        break;\r\n      default:\r\n        throw new Error(\"Invalid action\");\r\n    }\r\n  }\r\n\r\n  async function handleCreate() {\r\n    try {\r\n      const response = await REST.getBoard();\r\n      const data = await response.json();\r\n      return data.game;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async function handleValidate() {\r\n    try {\r\n      const response = await REST.validateBoard(grid);\r\n      const data = await response.json();\r\n      return data.status;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async function handleSolve() {\r\n    try {\r\n      const response = await REST.solveBoard(grid);\r\n      const data = await response.json();\r\n      if (data.status) {\r\n        setPuzzleStatus(\"** SOLVED **\");\r\n        return data.solution;\r\n      } else {\r\n        setPuzzleStatus(\"** UNSOLVABLE **\");\r\n        return grid;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Sudoku\">\r\n      <Board\r\n        puzzle={initialGrid.current}\r\n        grid={grid}\r\n        handleChange={handleChange}\r\n      />\r\n      <Interface handleInterface={handleInterface} status={puzzleStatus} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sudoku;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}